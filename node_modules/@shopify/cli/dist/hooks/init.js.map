{"version":3,"file":"init.js","sourceRoot":"","sources":["../../src/hooks/init.ts"],"names":[],"mappings":"AACA,OAAO,EAAC,YAAY,EAAC,MAAM,2CAA2C,CAAA;AACtE,OAAO,EAAC,cAAc,EAAC,MAAM,0BAA0B,CAAA;AACvD,OAAO,EAAC,GAAG,EAAE,QAAQ,EAAC,MAAM,4BAA4B,CAAA;AACxD,OAAO,EAAC,aAAa,EAAC,MAAM,0BAA0B,CAAA;AACtD,OAAO,EAAC,YAAY,EAAC,MAAM,IAAI,CAAA;AAE/B;;;;;;;;GAQG;AACH,MAAM,IAAI,GAAiB,KAAK,EAAE,OAAO,EAAE,EAAE;IAC3C,MAAM,iBAAiB,GAAG,OAAO,CAAC,EAAE,EAAE,UAAU,CAAC,WAAW,CAAC,IAAI,KAAK,CAAA;IACtE,MAAM,qBAAqB,GAAG,OAAO,CAAC,EAAE,EAAE,UAAU,CAAC,eAAe,CAAC,IAAI,KAAK,CAAA;IAC9E,IAAI,iBAAiB,IAAI,CAAC,qBAAqB,EAAE;QAC/C,MAAM,IAAI,GAAG,YAAY,EAAE,IAAI,GAAG,EAAE,CAAA;QACpC,MAAM,eAAe,GAAG,QAAQ,CAAC,IAAI,EAAE,cAAc,CAAC,CAAA;QACtD,IAAI,CAAC,cAAc,CAAC,eAAe,CAAC;YAAE,kBAAkB,EAAE,CAAA;QAC1D,MAAM,kBAAkB,GAAG,YAAY,CAAC,eAAe,EAAE,MAAM,CAAC,CAAA;QAChE,MAAM,WAAW,GAAG,IAAI,CAAC,KAAK,CAAC,kBAAkB,CAAC,CAAA;QAClD,MAAM,uBAAuB,GAAG,WAAW,CAAC,YAAuC,CAAA;QACnF,MAAM,2BAA2B,GAAG,uBAAuB,CAAC,mBAAmB,CAAC,KAAK,SAAS,CAAA;QAC9F,IAAI,CAAC,2BAA2B;YAAE,kBAAkB,EAAE,CAAA;KACvD;AACH,CAAC,CAAA;AAED,SAAS,kBAAkB;IACzB,aAAa,CAAC;QACZ,IAAI,EAAE;YACJ,mFAAmF;YACnF,KAAK;YACL,EAAC,OAAO,EAAE,uBAAuB,EAAC;YAClC,mCAAmC;SACpC;KACF,CAAC,CAAA;IACF,OAAO,CAAC,IAAI,EAAE,CAAA;AAChB,CAAC;AAED,eAAe,IAAI,CAAA","sourcesContent":["import {Hook} from '@oclif/core'\nimport {sniffForPath} from '@shopify/cli-kit/node/custom-oclif-loader'\nimport {fileExistsSync} from '@shopify/cli-kit/node/fs'\nimport {cwd, joinPath} from '@shopify/cli-kit/node/path'\nimport {renderWarning} from '@shopify/cli-kit/node/ui'\nimport {readFileSync} from 'fs'\n\n/**\n * When running a Hydrogen command (except hydrogen:init), check if the current directory is a Hydrogen project.\n * If it's not, show a warning and exit. We need to do this here because some hydrogen commands depend on some peerDependencies\n * that are loaded dynamically from the project's package.json.\n *\n * To check if the project is a Hydrogen one, we look for the presence of the \\@shopify/hydrogen dependency in the project's package.json.\n *\n * @param options - The options passed to the hook.\n */\nconst hook: Hook<'init'> = async (options) => {\n  const isHydrogenCommand = options.id?.startsWith('hydrogen:') ?? false\n  const isHydrogenInitCommand = options.id?.startsWith('hydrogen:init') ?? false\n  if (isHydrogenCommand && !isHydrogenInitCommand) {\n    const path = sniffForPath() ?? cwd()\n    const packageJsonPath = joinPath(path, 'package.json')\n    if (!fileExistsSync(packageJsonPath)) showWarningAndExit()\n    const packageJsonContent = readFileSync(packageJsonPath, 'utf8')\n    const packageJson = JSON.parse(packageJsonContent)\n    const packageJsonDependencies = packageJson.dependencies as {[key: string]: string}\n    const dependenciesIncludeHydrogen = packageJsonDependencies['@shopify/hydrogen'] !== undefined\n    if (!dependenciesIncludeHydrogen) showWarningAndExit()\n  }\n}\n\nfunction showWarningAndExit() {\n  renderWarning({\n    body: [\n      `Looks like you're trying to run a Hydrogen command outside of a Hydrogen project.`,\n      'Run',\n      {command: 'shopify hydrogen init'},\n      'to create a new Hydrogen project.',\n    ],\n  })\n  process.exit()\n}\n\nexport default hook\n"]}