import {
  findPort
} from "./chunk-IIVL4DYB.js";
import {
  DEFAULT_INSPECTOR_PORT,
  H2O_BINDING_NAME,
  SUBREQUEST_PROFILER_ENDPOINT,
  createLogRequestEvent,
  getUtilityBannerlines,
  handleDebugNetworkRequest,
  handleMiniOxygenImportFail,
  importLocal,
  logRequestLine,
  setConstructors
} from "./chunk-2Q7SKRRM.js";
import {
  AbortError,
  outputNewline,
  readFile,
  renderSuccess
} from "./chunk-2RKUO75O.js";
import "./chunk-UJQBYPRO.js";
import "./chunk-LAY4AEXX.js";
import "./chunk-4XNS74OG.js";
import "./chunk-CKKROMZF.js";
import "./chunk-LKGDG6WW.js";
import "./chunk-QX3YP6O5.js";
import "./chunk-HTYJDJRZ.js";
import "./chunk-7YJH7P7B.js";
import "./chunk-FAFQQMD4.js";
import {
  source_default
} from "./chunk-LUGC3D2G.js";
import "./chunk-FQIRJADJ.js";
import "./chunk-FBB6KUZG.js";
import "./chunk-SZQX5J7X.js";
import "./chunk-67MDUPX5.js";
import "./chunk-PBFWVFAQ.js";
import "./chunk-FWGRGI4R.js";
import "./chunk-BE73NZXB.js";
import "./chunk-VQZ2SHRY.js";
import "./chunk-6SL33DOA.js";
import "./chunk-WCNR75S2.js";
import "./chunk-3PIGYQSE.js";
import "./chunk-BZJX2NV6.js";
import "./chunk-RQ24VTW4.js";
import "./chunk-3JLUTHGR.js";
import "./chunk-GXPKATXW.js";
import {
  init_cjs_shims
} from "./chunk-M63RTPGR.js";

// ../../node_modules/.pnpm/@shopify+cli-hydrogen@0.0.0-next-ca7f288-20240530103543_react-dom@17.0.2_react@17.0.2/node_modules/@shopify/cli-hydrogen/dist/lib/mini-oxygen/node.js
init_cjs_shims();
import { AsyncLocalStorage } from "node:async_hooks";
async function startNodeServer({
  appPort,
  watch = false,
  buildPathWorkerFile,
  buildPathClient,
  env,
  debug = false,
  inspectorPort,
  root
}) {
  const { startServer, Request, Response } = await importLocal(
    "@shopify/mini-oxygen/node",
    root
  ).catch(handleMiniOxygenImportFail);
  setConstructors({ Response });
  const logRequestEvent = createLogRequestEvent();
  const asyncLocalStorage = new AsyncLocalStorage();
  const serviceBindings = {
    [H2O_BINDING_NAME]: {
      fetch: async (request) => logRequestEvent(
        new Request(request.url, {
          method: "POST",
          body: JSON.stringify({
            ...asyncLocalStorage.getStore(),
            ...await request.json()
          })
        })
      )
    }
  };
  if (debug) {
    if (!inspectorPort)
      inspectorPort = await findPort(DEFAULT_INSPECTOR_PORT);
    (await import("node:inspector")).open(inspectorPort);
  }
  const readWorkerFile = () => readFile(buildPathWorkerFile).catch((error) => {
    throw new AbortError(
      `Could not read worker file.

` + error.stack,
      "Did you build the project?"
    );
  });
  const miniOxygen = await startServer({
    script: await readWorkerFile(),
    workerFile: buildPathWorkerFile,
    assetsDir: buildPathClient,
    publicPath: "",
    port: appPort,
    watch,
    autoReload: watch,
    modules: true,
    env: {
      ...env,
      ...process.env,
      ...serviceBindings
    },
    log: () => {
    },
    async onRequest(request, defaultDispatcher) {
      const url = new URL(request.url);
      if (url.pathname === SUBREQUEST_PROFILER_ENDPOINT) {
        return handleDebugNetworkRequest(request);
      }
      const requestId = request.headers.get("request-id");
      const startTimeMs = Date.now();
      const response = await asyncLocalStorage.run(
        { requestId, purpose: request.headers.get("purpose") },
        () => defaultDispatcher(request)
      );
      const endTimeMs = Date.now();
      logRequestLine({
        request: {
          url: request.url,
          method: request.method,
          headers: Object.fromEntries(request.headers.entries())
        },
        response: {
          status: response.status,
          statusText: response.statusText,
          headers: Object.fromEntries(response.headers.entries())
        },
        meta: {
          startTimeMs,
          endTimeMs,
          durationMs: startTimeMs > 0 ? endTimeMs - startTimeMs : 0
        }
      });
      return response;
    }
  });
  const listeningAt = `http://localhost:${miniOxygen.port}`;
  return {
    listeningAt,
    port: miniOxygen.port,
    async reload(options) {
      const nextOptions = {};
      if (options?.env) {
        nextOptions.env = {
          ...options.env,
          ...process.env
        };
      }
      nextOptions.script = await readWorkerFile();
      await miniOxygen.reload(nextOptions);
    },
    showBanner(options) {
      outputNewline();
      const customSections = [];
      if (options?.host) {
        customSections.push({ body: getUtilityBannerlines(options.host) });
      }
      if (debug && inspectorPort) {
        customSections.push({
          body: { warn: `Debugger listening on ws://localhost:${inspectorPort}` }
        });
      }
      renderSuccess({
        headline: `${options?.headlinePrefix ?? ""}MiniOxygen (Node Sandbox) ${options?.mode ?? "development"} server running.`,
        body: [
          `View ${options?.appName ? source_default.cyan(options?.appName) : "Hydrogen"} app:`,
          { link: { url: options?.host || listeningAt } }
        ],
        customSections
      });
      console.log("");
    },
    async close() {
      await miniOxygen.close();
    }
  };
}
export {
  startNodeServer
};
