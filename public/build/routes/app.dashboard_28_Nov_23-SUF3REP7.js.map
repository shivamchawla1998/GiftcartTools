{
  "version": 3,
  "sources": ["../../../app/routes/app.dashboard_28_Nov_23.tsx"],
  "sourcesContent": ["// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app/routes/app.dashboard_28_Nov_23.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nvar _s = $RefreshSig$();\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app/routes/app.dashboard_28_Nov_23.tsx\");\n  import.meta.hot.lastModified = \"1703668382985.457\";\n}\n// REMIX HMR END\n\nimport { Box, Card, Page } from \"@shopify/polaris\";\nimport { useState } from \"react\";\nimport BarcodeGenerator from \"~/components/BarcodeGenerator\";\nimport MyEditableTable from \"~/components/MyEditableTable\";\nconst defaultData = [{\n  itemName: 'tanner',\n  itemCode: 'linsley',\n  noOfLabels: 24,\n  header: \"100\",\n  line1: 'In Relationship',\n  line2: \"50\"\n}];\n\n// const columnHelper = createColumnHelper<Item>()\n\n// const columns = [\n//   columnHelper.accessor('itemName', {\n//     cell: info => info.getValue(),\n//     header: () => <span>Item Name</span>,\n//     // footer: info => info.column.id,\n//   }),\n//   columnHelper.accessor(row => row.itemCode, {\n//     id: 'itemCode',\n//     cell: info => <i>{info.getValue()}</i>,\n//     header: () => <span>Item Code</span>,\n//     // footer: info => info.column.id,\n//   }),\n//   columnHelper.accessor('noOfLabels', {\n//     header: () => <span>No. of Labels</span>,\n//     cell: info => info.renderValue(),\n//     // footer: info => info.column.id,\n//   }),\n//   columnHelper.accessor('header', {\n//     header: () => <span>Header</span>,\n//     // footer: info => info.column.id,\n//   }),\n//   columnHelper.accessor('line1', {\n//     header: () => <span>Line 1</span>,\n//     // footer: info => info.column.id,\n//   }),\n//   columnHelper.accessor('line2', {\n//     header: () => <span>Line 2</span>,\n//     // footer: info => info.column.id,\n//   }),\n// ]\n\nexport default function Dashboard(props) {\n  _s();\n  const [data, setData] = useState(() => [...defaultData]);\n  // const rerender = useReducer(() => ({}), {})[1]\n\n  // const table = useReactTable({\n  //   data,\n  //   columns,\n  //   getCoreRowModel: getCoreRowModel(),\n  // })\n\n  // const rows = [\n  //   ['Emerald Silk Gown', '$875.00', 124689, 140, '$122,500.00'],\n  //   ['Mauve Cashmere Scarf', '$230.00', 124533, 83, '$19,090.00'],\n  //   ['Navy Merino Wool Blazer', '$445.00', 124518, 32, '$14,240.00'],\n  //   // Add more rows as needed\n  // ];\n\n  // const [data, setData] = useState([\n  //   { id: 1, product: 'Emerald Silk Gown', price: '$875.00' },\n  //   { id: 2, product: 'Mauve Cashmere Scarf', price: '$230.00' },\n  //   // Add more data rows as needed\n  // ]);\n\n  const handlePriceChange = (rowIndex, newValue) => {\n    const updatedData = [...data];\n    updatedData[rowIndex].noOfLabels = newValue;\n    setData(updatedData);\n  };\n  const columns = [{\n    title: 'Item Name',\n    dataIndex: 'itemName'\n  }, {\n    title: 'Item Code',\n    dataIndex: 'itemCode'\n  }, {\n    title: 'No. Of Labels',\n    dataIndex: 'noOfLabels',\n    render: (value, row, rowIndex) => <input type=\"text\" value={value} onChange={e => handlePriceChange(rowIndex, e.target.value)} />\n  }, {\n    title: 'Header',\n    dataIndex: 'header'\n  }, {\n    title: 'Line 1',\n    dataIndex: 'line1'\n  }, {\n    title: 'Line 2',\n    dataIndex: 'line2'\n  }];\n\n  // const columnHelper = createColumnHelper<Person>()\n\n  // Make some columns!\n  // const defaultColumns = [\n  //   // Display Column\n  //   columnHelper.display({\n  //     id: 'actions',\n  //     cell: props => <RowActions row={props.row} />,\n  //   }),\n  //   // Grouping Column\n  //   columnHelper.group({\n  //     header: 'Name',\n  //     footer: props => props.column.id,\n  //     columns: [\n  //       // Accessor Column\n  //       columnHelper.accessor('firstName', {\n  //         cell: info => info.getValue(),\n  //         footer: props => props.column.id,\n  //       }),\n  //       // Accessor Column\n  //       columnHelper.accessor(row => row.lastName, {\n  //         id: 'lastName',\n  //         cell: info => info.getValue(),\n  //         header: () => <span>Last Name</span>,\n  //         footer: props => props.column.id,\n  //       }),\n  //     ],\n  //   }),\n  //   // Grouping Column\n  //   columnHelper.group({\n  //     header: 'Info',\n  //     footer: props => props.column.id,\n  //     columns: [\n  //       // Accessor Column\n  //       columnHelper.accessor('age', {\n  //         header: () => 'Age',\n  //         footer: props => props.column.id,\n  //       }),\n  //       // Grouping Column\n  //       columnHelper.group({\n  //         header: 'More Info',\n  //         columns: [\n  //           // Accessor Column\n  //           columnHelper.accessor('visits', {\n  //             header: () => <span>Visits</span>,\n  //             footer: props => props.column.id,\n  //           }),\n  //           // Accessor Column\n  //           columnHelper.accessor('status', {\n  //             header: 'Status',\n  //             footer: props => props.column.id,\n  //           }),\n  //           // Accessor Column\n  //           columnHelper.accessor('progress', {\n  //             header: 'Profile Progress',\n  //             footer: props => props.column.id,\n  //           }),\n  //         ],\n  //       }),\n  //     ],\n  //   }),\n  // ]\n\n  return <Page>\n      <ui-title-bar title=\"Dashboard\" />\n      <div>\n        <h1>Barcode Generator</h1>\n        <BarcodeGenerator value=\"123456789\" />\n      </div>\n\n      {/* <Card>\n        <DataTable\n          columnContentTypes={['text', 'numeric', 'numeric', 'numeric', 'numeric']}\n          headings={columns1.map((column) => column.title)}\n          rows={rows}\n        />\n       </Card> */}\n      <Card>\n        <MyEditableTable columns={columns} data={data} />\n      </Card>\n      <div>\n\n        {/* <div className=\"p-2\">\n          <table>\n            <thead>\n              {table.getHeaderGroups().map(headerGroup => (\n                <tr key={headerGroup.id}>\n                  {headerGroup.headers.map(header => (\n                    <th key={header.id}>\n                      {header.isPlaceholder\n                        ? null\n                        : flexRender(\n                          header.column.columnDef.header,\n                          header.getContext()\n                        )}\n                    </th>\n                  ))}\n                </tr>\n              ))}\n            </thead>\n            <tbody>\n              {table.getRowModel().rows.map(row => (\n                <tr key={row.id}>\n                  {row.getVisibleCells().map(cell => (\n                    <td key={cell.id}>\n                      {flexRender(cell.column.columnDef.cell, cell.getContext())}\n                    </td>\n                  ))}\n                </tr>\n              ))}\n            </tbody>\n            <tfoot>\n              {table.getFooterGroups().map(footerGroup => (\n                <tr key={footerGroup.id}>\n                  {footerGroup.headers.map(header => (\n                    <th key={header.id}>\n                      {header.isPlaceholder\n                        ? null\n                        : flexRender(\n                          header.column.columnDef.footer,\n                          header.getContext()\n                        )}\n                    </th>\n                  ))}\n                </tr>\n              ))}\n            </tfoot>\n          </table>\n          <div className=\"h-4\" />\n          <button onClick={() => rerender()} className=\"border p-2\">\n            Rerender\n          </button>\n         </div> */}\n\n      </div>\n      {/* <Layout>\n        <Layout.Section>\n          <Card>\n            <VerticalStack gap=\"3\">\n              <Text as=\"p\" variant=\"bodyMd\">\n                The app template comes with an additional page which\n                demonstrates how to create multiple pages within app navigation\n                using{\" \"}\n                <Link\n                  url=\"https://shopify.dev/docs/apps/tools/app-bridge\"\n                  target=\"_blank\"\n                >\n                  App Bridge\n                </Link>\n                .\n              </Text>\n              <Text as=\"p\" variant=\"bodyMd\">\n                To create your own page and have it show up in the app\n                navigation, add a page inside <Code>app/routes</Code>, and a\n                link to it in the <Code>&lt;ui-nav-menu&gt;</Code> component\n                found in <Code>app/routes/app.jsx</Code>.\n              </Text>\n            </VerticalStack>\n          </Card>\n        </Layout.Section>\n        <Layout.Section secondary>\n          <Card>\n            <VerticalStack gap=\"2\">\n              <Text as=\"h2\" variant=\"headingMd\">\n                Resources\n              </Text>\n              <List spacing=\"extraTight\">\n                <List.Item>\n                  <Link\n                    url=\"https://shopify.dev/docs/apps/design-guidelines/navigation#app-nav\"\n                    target=\"_blank\"\n                  >\n                    App nav best practices\n                  </Link>\n                </List.Item>\n              </List>\n            </VerticalStack>\n          </Card>\n        </Layout.Section>\n       </Layout> */}\n\n    </Page>;\n}\n_s(Dashboard, \"Juefmdxv02WgwrMtvWf6+szJSrs=\");\n_c = Dashboard;\nfunction Code({\n  children\n}) {\n  return <Box as=\"span\" padding=\"025\" paddingInlineStart=\"1\" paddingInlineEnd=\"1\" background=\"bg-subdued\" borderWidth=\"1\" borderColor=\"border\" borderRadius=\"1\">\n      <code>{children}</code>\n    </Box>;\n}\n_c2 = Code;\nvar _c, _c2;\n$RefreshReg$(_c, \"Dashboard\");\n$RefreshReg$(_c2, \"Code\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;AAsBA,mBAAyB;AAmFa;AAxGtC,IAAI,CAAC,OAAO,gBAAgB,CAAC,OAAO,gBAAgB,CAAC,OAAO,kBAAkB;AAC5E,UAAQ,KAAK,kGAAkG;AACjH,OAAO;AACD,mBAAiB,OAAO;AACxB,mBAAiB,OAAO;AAC5B,SAAO,eAAe,CAAC,MAAM,OAAO;AAClC,WAAO,iBAAiB,SAAS,MAAM,6CAA+C,EAAE;AAAA,EAC1F;AACA,SAAO,eAAe,OAAO,iBAAiB;AAChD;AANM;AACA;AAMN,IAAI,KAAK,aAAa;AAEtB,IAAI,aAAa;AACf,cAAY,MAAc;AAAA;AAAA,IAE1B;AAAA,EAAwC;AACxC,cAAY,IAAI,eAAe;AACjC;AAOA,IAAM,cAAc,CAAC;AAAA,EACnB,UAAU;AAAA,EACV,UAAU;AAAA,EACV,YAAY;AAAA,EACZ,QAAQ;AAAA,EACR,OAAO;AAAA,EACP,OAAO;AACT,CAAC;AAmCc,SAAR,UAA2B,OAAO;AACvC,KAAG;AACH,QAAM,CAAC,MAAM,OAAO,QAAI,uBAAS,MAAM,CAAC,GAAG,WAAW,CAAC;AAsBvD,QAAM,oBAAoB,CAAC,UAAU,aAAa;AAChD,UAAM,cAAc,CAAC,GAAG,IAAI;AAC5B,gBAAY,QAAQ,EAAE,aAAa;AACnC,YAAQ,WAAW;AAAA,EACrB;AACA,QAAM,UAAU,CAAC;AAAA,IACf,OAAO;AAAA,IACP,WAAW;AAAA,EACb,GAAG;AAAA,IACD,OAAO;AAAA,IACP,WAAW;AAAA,EACb,GAAG;AAAA,IACD,OAAO;AAAA,IACP,WAAW;AAAA,IACX,QAAQ,CAAC,OAAO,KAAK,aAAa,mDAAC,WAAM,MAAK,QAAO,OAAc,UAAU,OAAK,kBAAkB,UAAU,EAAE,OAAO,KAAK,KAA1F;AAAA;AAAA;AAAA;AAAA,WAA6F;AAAA,EACjI,GAAG;AAAA,IACD,OAAO;AAAA,IACP,WAAW;AAAA,EACb,GAAG;AAAA,IACD,OAAO;AAAA,IACP,WAAW;AAAA,EACb,GAAG;AAAA,IACD,OAAO;AAAA,IACP,WAAW;AAAA,EACb,CAAC;AAiED,SAAO,mDAAC,QACJ;AAAA,uDAAC,kBAAa,OAAM,eAApB;AAAA;AAAA;AAAA;AAAA,WAAgC;AAAA,IAChC,mDAAC,SACC;AAAA,yDAAC,QAAG,iCAAJ;AAAA;AAAA;AAAA;AAAA,aAAqB;AAAA,MACrB,mDAAC,4BAAiB,OAAM,eAAxB;AAAA;AAAA;AAAA;AAAA,aAAoC;AAAA,SAFtC;AAAA;AAAA;AAAA;AAAA,WAGA;AAAA,IASA,mDAAC,QACC,6DAAC,2BAAgB,SAAkB,QAAnC;AAAA;AAAA;AAAA;AAAA,WAA+C,KADjD;AAAA;AAAA;AAAA;AAAA,WAEA;AAAA,IACA,mDAAC,WAAD;AAAA;AAAA;AAAA;AAAA,WAsDA;AAAA,OAvEG;AAAA;AAAA;AAAA;AAAA,SAsHL;AACJ;AACA,GAAG,WAAW,8BAA8B;AAC5C,KAAK;AACL,SAAS,KAAK;AAAA,EACZ;AACF,GAAG;AACD,SAAO,mDAAC,OAAI,IAAG,QAAO,SAAQ,OAAM,oBAAmB,KAAI,kBAAiB,KAAI,YAAW,cAAa,aAAY,KAAI,aAAY,UAAS,cAAa,KACtJ,6DAAC,UAAM,YAAP;AAAA;AAAA;AAAA;AAAA,SAAgB,KADb;AAAA;AAAA;AAAA;AAAA,SAEL;AACJ;AACA,MAAM;AACN,IAAI;AAAJ,IAAQ;AACR,aAAa,IAAI,WAAW;AAC5B,aAAa,KAAK,MAAM;AAExB,OAAO,eAAe;AACtB,OAAO,eAAe;",
  "names": []
}
