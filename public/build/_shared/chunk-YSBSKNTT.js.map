{
  "version": 3,
  "sources": ["../../../app/components/MyEditableTable.tsx"],
  "sourcesContent": ["// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app/components/MyEditableTable.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app/components/MyEditableTable.tsx\");\n  import.meta.hot.lastModified = \"1701930264202.035\";\n}\n// REMIX HMR END\n\nimport React from 'react';\nimport { DataTable } from '@shopify/polaris';\nconst MyEditableTable = ({\n  columns,\n  data,\n  onPriceChange\n}) => {\n  console.log(\"Data: \", data);\n  const dataAsArray = data.map(item => Object.values(item));\n  const rows = dataAsArray.map((item, rowIndex) => ({\n    id: rowIndex,\n    ...item,\n    // Use the object directly, assuming keys match dataIndex in columns\n    cells: columns.map((column, columnIndex) => ({\n      content: column.dataIndex === 'noOfLabels' ? <input value={item.noOfLabels} onChange={value => onPriceChange(rowIndex, value)} /> : item[column.dataIndex]\n    }))\n  }));\n  return (\n    // <Page title=\"Product Prices\">\n    //   <Card>\n    <DataTable columnContentTypes={['text', 'numeric', 'numeric', 'numeric', 'numeric']} headings={columns.map(column => column.title)}\n    // rows={[]}\n    rows={dataAsArray} />\n    //   </Card>\n    // </Page>\n  );\n};\n_c = MyEditableTable;\nexport default MyEditableTable;\nvar _c;\n$RefreshReg$(_c, \"MyEditableTable\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;"],
  "mappings": ";;;;;;;;;;;;;;AAkCmD;AAjCnD,IAAI,CAAC,OAAO,gBAAgB,CAAC,OAAO,gBAAgB,CAAC,OAAO,kBAAkB;AAC5E,UAAQ,KAAK,kGAAkG;AACjH,OAAO;AACD,mBAAiB,OAAO;AACxB,mBAAiB,OAAO;AAC5B,SAAO,eAAe,CAAC,MAAM,OAAO;AAClC,WAAO,iBAAiB,SAAS,MAAM,yCAA2C,EAAE;AAAA,EACtF;AACA,SAAO,eAAe,OAAO,iBAAiB;AAChD;AANM;AACA;AAON,IAAI,aAAa;AACf,cAAY,MAAc;AAAA;AAAA,IAE1B;AAAA,EAAoC;AACpC,cAAY,IAAI,eAAe;AACjC;AAKA,IAAM,kBAAkB,CAAC;AAAA,EACvB;AAAA,EACA;AAAA,EACA;AACF,MAAM;AACJ,UAAQ,IAAI,UAAU,IAAI;AAC1B,QAAM,cAAc,KAAK,IAAI,UAAQ,OAAO,OAAO,IAAI,CAAC;AACxD,QAAM,OAAO,YAAY,IAAI,CAAC,MAAM,cAAc;AAAA,IAChD,IAAI;AAAA,IACJ,GAAG;AAAA;AAAA,IAEH,OAAO,QAAQ,IAAI,CAAC,QAAQ,iBAAiB;AAAA,MAC3C,SAAS,OAAO,cAAc,eAAe,mDAAC,WAAM,OAAO,KAAK,YAAY,UAAU,WAAS,cAAc,UAAU,KAAK,KAA/E;AAAA;AAAA;AAAA;AAAA,aAAkF,IAAK,KAAK,OAAO,SAAS;AAAA,IAC3J,EAAE;AAAA,EACJ,EAAE;AACF;AAAA;AAAA;AAAA,IAGE;AAAA,MAAC;AAAA;AAAA,QAAU,oBAAoB,CAAC,QAAQ,WAAW,WAAW,WAAW,SAAS;AAAA,QAAG,UAAU,QAAQ,IAAI,YAAU,OAAO,KAAK;AAAA,QAEjI,MAAM;AAAA;AAAA,MAFN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAEmB;AAAA;AAIvB;AACA,KAAK;AACL,IAAO,0BAAQ;AACf,IAAI;AACJ,aAAa,IAAI,iBAAiB;AAElC,OAAO,eAAe;AACtB,OAAO,eAAe;",
  "names": []
}
